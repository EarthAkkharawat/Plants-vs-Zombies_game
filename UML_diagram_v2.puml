@startuml
class SunFlower {
- Timeline sunProducer
+ <<Create>> SunFlower(int,int,int,int)
+ void attacking(Pane)
+ void attacking()
+ void produceSun(Pane)
+ void checkHealthPoint()
+ Timeline getSunProducer()
}
class GameController {
- AnchorPane GamePlayRoot
- ImageView lawnImage
- Label sunCountLabel
- ImageView GameMenuLoaderButton
- ProgressBar progressBar
- int levelNumber
- GridPane lawn_grid
+ {static} boolean gameStatus
+ {static} Timeline sunTimeline
+ {static} Timeline spawnZombies1
+ {static} Timeline spawnZombies2
- {static} Label sunCountDisplay
- double timeElapsed
- {static} int sunCount
+ {static} int LANE1
+ {static} int LANE2
+ {static} int LANE3
+ {static} int LANE4
+ {static} int LANE5
- GameEntity level
+ {static} List allZombies
+ {static} List allPlants
+ {static} ArrayList<Integer> zombieList1
+ {static} ArrayList<Integer> zombieList2
- GameData data
+ {static} int wonGame
+ {static} double numKilledZombies
+ {static} ArrayList<Timeline> animationTimelines
+ {static} String theme
- Shovel shovel
- int spawnedZombies
+ void initialize()
+ void initializeData(int,GameData)
+ void startAnimations()
+ void gameProgress()
+ void gameLost()
+ void gameWon()
+ {static} void endAnimations()
+ void endZombieSpawn1()
+ void endZombieSpawn2()
~ void GameMenuLoader(MouseEvent)
+ {static} void updateSunCount(int)
+ {static} Label getSunCountLabel()
+ {static} void removePlant(Plant)
+ {static} void removeZombie(Zombie)
+ void fallingSuns(Random)
+ void zombieSpawner1(Random,double)
+ void zombieSpawner2(Random,double)
~ void getGridPosition(MouseEvent)
+ void dropPlant(int,int,int,int,int)
}
class Pea {
- int lane
- int plantPosition
- Timeline peaAnimation
- boolean bombed
+ <<Create>> Pea(int,int,int,int)
+ void movePea()
+ void shootPea()
+ void checkZombieCollision()
+ void setLane(int)
+ void setPlantPosition(int)
+ void setBombed(boolean)
}
class ChilliPepper {
- ArrayList<Zombie> roastedZombies
- ImageView[] fires
+ <<Create>> ChilliPepper(int,int,int,int)
+ void attacking()
+ void buildImage(GridPane)
+ void attacking(Pane)
+ void removeFire()
+ void checkHealthPoint()
+ ArrayList<Zombie> getRoastedZombies()
}
class DefaultZombie {
+ <<Create>> DefaultZombie(int,int,int)
+ void attacking()
+ void attacking(Pane)
}
class Entity {
# int x
# int y
# int width
# int height
# ImageView image
# String path
+ <<Create>> Entity(int,int,int,int,String)
+ void buildImage(Pane)
+ int getX()
+ void setX(int)
+ int getY()
+ void setY(int)
+ ImageView getImage()
+ void setImage(ImageView)
+ String getPath()
}
class SideElement {
- {static} int cardSelected
- int cooldownTime
- boolean isDisabled
- {static} ImageView selectedBorder
- {static} HashMap<Integer,SideElement> allElements
- int cost
+ <<Create>> SideElement(int,int,String,int,int,int)
+ int getCost()
+ {static} void getSideElements(int,Pane)
+ {static} void handler(SideElement,int)
+ {static} int getCardSelected()
- {static} void setCardSelected(int)
+ {static} void setCardSelectedToNull()
+ {static} SideElement getElement(int)
+ void setDisabledOn(Pane)
}
class Main {
+ {static} MediaPlayer mediaPlayer
- {static} int maxLevel
+ void start(Stage)
+ void addMusic()
+ {static} int getMaxLevel()
+ void setMaxLevel(int)
+ {static} void main(String[])
}
class PeaShooter {
+ <<Create>> PeaShooter(int,int,int,int)
}
class Shooter {
# Timeline shooterTimeline
# int lane
+ <<Create>> Shooter(int,int,String,int,int,int,int,int)
+ void attacking(Pane)
+ void attacking()
+ Timeline getShooterTimeline()
+ int getShooterLane()
+ void checkHealthPoint()
}
class CherryBomb {
# ImageView cherry
- ArrayList<Zombie> roastedZombies
+ <<Create>> CherryBomb(int,int,int,int)
+ void attacking()
+ void buildImage(GridPane)
+ void attacking(Pane)
+ void removeCherry()
+ void checkHealthPoint()
+ ArrayList<Zombie> getRoastedZombies()
}
class MainMenuController {
- AnchorPane mainRoot
~ void exitGame()
~ void showLevelMenu()
~ void startGame()
}
class FunnelHeadZombie {
+ <<Create>> FunnelHeadZombie(int,int,int)
+ void attacking(Pane)
+ void attacking()
}
class Shovel {
- {static} boolean isDisabled
- {static} Shovel shovel
- <<Create>> Shovel()
+ boolean IsDisabled()
+ {static} Shovel getInstance()
+ void buildImage(Pane)
+ void enable()
+ void disable()
}
interface Attackable {
~ void attacking(Pane)
~ void attacking()
}
class Wallnut {
+ <<Create>> Wallnut(int,int,int,int)
+ void checkHealthPoint()
+ void attacking(Pane)
+ void attacking()
}
class Sun {
- int timeout_time
+ <<Create>> Sun(int,int,boolean)
+ void disappear()
+ void buildImage(Pane)
+ void sunMovement()
+ void fallingSun()
}
class Repeater {
+ <<Create>> Repeater(int,int,int,int)
+ void attacking(Pane)
}
class BucketHeadZombie {
+ <<Create>> BucketHeadZombie(int,int,int)
+ void attacking(Pane)
+ void attacking()
}
class LevelMenuController {
- AnchorPane levelRoot
- ImageView level1button
- ImageView level2button
- ImageView level3button
- ImageView level4button
- ImageView level5button
- ImageView backbutton
- ImageView nightTheme
+ ImageView nightMode
+ ImageView dayMode
+ {static} boolean status
+ void initialize()
~ void shineImage(MouseEvent)
~ void stopShining(MouseEvent)
~ void startLevel1()
~ void startLevel2()
~ void startLevel3()
~ void startLevel4()
~ void startLevel5()
~ void PrevMenuLoader()
~ void changeGameTheme()
+ {static} boolean getDayMode()
}
abstract class Plant {
# int row
# int column
# int healthpoint
+ <<Create>> Plant(int,int,int,int,String,int,int,int)
+ void buildImage(GridPane)
+ int getHealthpoint()
+ void setHealthpoint(int)
+ {abstract}void checkHealthPoint()
+ void endAnimation(Timeline)
+ int getRow()
+ int getColumn()
}
abstract class Zombie {
- int health
- int attackPower
- int lane
- int dx
- Timeline zombieAnimation
- Timeline eating
- boolean reachedPlant
- boolean isEating
+ <<Create>> Zombie(int,int,int,int,int,int,int,String)
+ void setHealth(int)
+ void burntZombie()
+ void ReachedHouse()
+ void chompPlant()
+ void moveZombie()
+ void zombieWalk()
+ void eatPlant()
+ int getHealth()
+ int getAttackPower()
+ int getLane()
+ void setLane(int)
+ void setAttackPower(int)
+ void setDx(int)
+ Timeline getZombieAnimation()
}
class GameMenuController {
- AnchorPane GamePlayRoot
- ImageView restartGameButton
- int levelNumber
- GameData data
+ {static} List<Plant> allPlants
- {static} int sunCount
- {static} List<Zombie> allZombies
- {static} double time
- {static} ArrayList<Integer> zombieList1
- {static} ArrayList<Integer> zombieList2
+ void initializeData(AnchorPane,int,GameData,int,List<Plant>,List<Zombie>,double,ArrayList<Integer>,ArrayList<Integer>)
~ void restartGame(MouseEvent)
~ void showMainMenu(MouseEvent)
}
class EndGameController {
+ Button mainMenuButton
- AnchorPane endGame
- ImageView zombiesAteYourBrains
- ImageView youAteZombiesBrains
- ImageView youWon
- ImageView nextLevelButton
- ImageView plantImage
~ void ToMainMenu()
~ void ToNextLevel()
+ void initialize()
+ void endGameUI(int,boolean)
}
class GameData {
- List<Zombie> allZombie
- List<Plant> allPlants
- ArrayList<Integer> zombieList1
- ArrayList<Integer> zombieList2
- boolean status
- double timeElapsed
- int Level
- int sunCount
+ <<Create>> GameData(int)
+ void updateData(int,int,List<Plant>,List<Zombie>,double,ArrayList<Integer>,ArrayList<Integer>,boolean)
+ String LevelToString()
+ List<Zombie> getAllZombie()
+ List<Plant> getAllPlants()
+ ArrayList<Integer> getZombieList1()
+ ArrayList<Integer> getZombieList2()
+ boolean getStatus()
+ double getTimeElapsed()
+ int getLevel()
+ int getSunCount()
}
class GameEntity {
- int level
- int numDefaultZombie
- int numFunnelHeadZombie
- int numBucketHeadZombie
- ArrayList<Integer> availableZombies
- ArrayList<Integer> zombieList1
- ArrayList<Integer> zombieList2
- int totalZombies
+ <<Create>> GameEntity(int)
+ {static} void spawnDefaultZombie(Pane,int,int)
+ {static} void spawnFunnelHeadZombie(Pane,int,int)
+ {static} void spawnBucketHeadZombie(Pane,int,int)
+ int getLevel()
+ int getNumDefaultZombie()
+ int getNumFunnelHeadZombie()
+ int getNumBucketHeadZombie()
+ ArrayList<Integer> getZombieList1()
+ ArrayList<Integer> getZombieList2()
+ int getTotalZombies()
+ ArrayList<Integer> getAvailableZombies()
}


Plant <|-- SunFlower
Entity <|-- Pea
Plant <|-- ChilliPepper
Zombie <|-- DefaultZombie
Entity <|-- SideElement
Application <|-- Main
Shooter <|-- PeaShooter
Plant <|-- Shooter
Plant <|-- CherryBomb
Zombie <|-- FunnelHeadZombie
Entity <|-- Shovel
Plant <|-- Wallnut
Entity <|-- Sun
Shooter <|-- Repeater
Zombie <|-- BucketHeadZombie
Attackable <|.. Plant
Entity <|-- Plant
Attackable <|.. Zombie
Entity <|-- Zombie
@enduml